{
	// Place your ecommerce-application workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create new Web Component": {
		"prefix": "@W",
		"body": [
			"import { Dispatch } from 'redux';",
			"import State from './types';",
			"import createElementFromHTML from '../utils/createElementFromHTML';",
			"import ElementHTML from './index.html';",
			"",
			"export default class extends HTMLElement {",
			"  public \u0024$element: HTMLElement | null;",
			"",
			"  constructor() {",
			"    super();",
			"    this.\u0024$element = createElementFromHTML(ElementHTML);",
			"  }",
			"",
			"  private connectedCallback(): void {",
			"    this.attachShadow({ mode: 'open' });",
			"    if (this.\u0024$element) this.shadowRoot?.appendChild(this.\u0024$element);",
			"  }",
			"",
			"  private disconnectedCallback(): void {}",
			"",
			"  private attributeChangedCallback(attributeName: string, oldValue: string, newValue: string): void {}",
			"",
			"  // redux state change observer",
			"  private mapStateToProps(oldState: State, newState: State): void {",
			"    this.attributeChangedCallback('attributeName', oldState.props, newState.props);",
			"  }",
			"",
			"  // redux dispath action",
			"  private mapDispatchToProps(dispatch: Dispatch): { [index: string]: () => ReturnType<Dispatch> } {",
			"    return {",
			"      action: () => dispatch({ type: 'ACTION' }),",
			"    };",
			"  }",
			"",
			"  private adoptedCallback(): void {}",
			"",
			"  private static get observedAttributes(): string[] {",
			"    return ['name'];",
			"  }",
			"}",
			"",
		],
		"description": "Create new Web Component with Redux integration"
	},
}